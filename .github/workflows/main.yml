name: OARepo API CI

on: [push]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          mkdir pypi
          pip install --upgrade pip setuptools py poetry
          poetry config virtualenvs.in-project true --local
          python -m venv .venv
          source .venv/bin/activate
          .venv/bin/pip install -U setuptools pip wheel
          poetry update --lock
          poetry export --without-hashes -f requirements.txt -o pypi/requirements-build.txt
          poetry export --without-hashes --dev -f requirements.txt -o pypi/requirements-dev.txt
          .venv/bin/pip install -r pypi/requirements-build.txt
          poetry install -vvv --no-dev
          cp poetry.lock pypi/
      - name: Set project info to ENV
        run: |
          echo "PROJECT_NAME=$(poetry version | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(poetry version -s)" >> $GITHUB_ENV
          echo Building project: ${PROJECT_NAME}, version: ${PROJECT_VERSION}
      - name: Upload pypi artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pypi-requirements-${{ env.PROJECT_VERSION }}
          path: pypi
          retention-days: 14
      - name: Build project package
        run: poetry build
      - name: Upload package dist artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}
          path: dist
          retention-days: 14
      - name: DEBUG
        run: ls -R ./
  publish:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Set project info to ENV
        run: |
          echo "PROJECT_NAME=$(poetry version | cut -d' ' -f1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(poetry version -s)" >> $GITHUB_ENV
          echo Building project: ${PROJECT_NAME}, version: ${PROJECT_VERSION}
      - name: Prepare directories
        run: |
          mkdir dist
          mkdir pypi
      - uses: actions/download-artifact@v2
        with:
          name: pypi-requirements-${{ env.RELEASE_VERSION }}
          path: pypi
      - uses: actions/download-artifact@v2
        with:
          name: dist-${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}
          path: pypi
      - name: Prepare production requirements
        run: |
          echo "$PROJECT_NAME==$PROJECT_VERSION \\" > pypi/requirements.txt
          cat pypi/requirements-build.txt >> pypi/requirements.txt
          cat pypi/requirements.txt
